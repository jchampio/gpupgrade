## Code generated by ci/generate.go - DO NOT EDIT
---
resource_types:
- name: gcs
  type: docker-image
  source:
    repository: frodenas/gcs-resource

- name: slack-notification
  type: docker-image
  source:
    repository: cfcommunity/slack-notification-resource
    tag: latest

- name: terraform
  type: docker-image
  source:
    repository: ljfranklin/terraform-resource
    tag: 0.11.14

resources:
- name: gpupgrade_src
  type: git
  source:
    uri: ((gpupgrade-git-remote))
    branch: ((gpupgrade-git-branch))

- name: gpdb6_src
  type: git
  source:
    uri: https://github.com/greenplum-db/gpdb
    branch: 6X_STABLE

- name: retail_demo_src
  type: git
  source:
    uri: ((retail-demo-git-remote))
    private_key: ((retail-demo-git-key))
    # todo: change to ((retail-demo-git-branch))
    branch: gpupgrade


- name: bin_gpdb5_centos6
  type: s3
  source:
    access_key_id: ((bucket-access-key-id))
    bucket: ((gpdb-stable-builds-bucket-name))
    region_name: ((aws-region))
    secret_access_key: ((bucket-secret-access-key))
    versioned_file: release_candidates/bin_gpdb_centos6/gpdb5/bin_gpdb.tar.gz



- name: bin_gpdb6.5.0_centos6
  type: gcs
  source:
    bucket: ((gcs-bucket))
    json_key: ((concourse-gcs-resources-service-account-key))
    regexp: server/published/gpdb6/server-rc-(6\.5\.0.*)-rhel6_x86_64.debug.tar.gz


- name: bats
  type: git
  source:
    uri: https://github.com/bats-core/bats-core
    branch: master
    tag_filter: v1.*

- name: slack-alert
  type: slack-notification
  source:
    url: ((cm_webhook_url))

- name: ccp_src
  type: git
  source:
    branch: ((ccp-git-branch))
    private_key: ((ccp-git-key))
    uri: ((ccp-git-remote))

- name: terraform
  type: terraform
  source:
    env:
      AWS_ACCESS_KEY_ID: ((tf-machine-access-key-id))
      AWS_SECRET_ACCESS_KEY: ((tf-machine-secret-access-key))
      GOOGLE_CREDENTIALS: ((google-service-account-key))
    vars:
      project_id: ((google-project-id))
    storage:
      access_key_id: ((tf-machine-access-key-id))
      secret_access_key: ((tf-machine-secret-access-key))
      region_name: ((aws-region))
      # This is not parameterized, on purpose. All tfstates will go to this spot,
      # and different teams will place there clusters' tfstate files under different paths
      bucket: gpdb5-pipeline-dynamic-terraform
      bucket_path: clusters-google/

#- name: dump_gpdb6_icw_gporca_centos6
#  type: gcs
#  source:
#    bucket: ((gcs-bucket-intermediates))
#    json_key: ((concourse-gcs-resources-service-account-key))
#    versioned_file: 6X_STABLE/icw_gporca_centos6_dump/dump.sql.xz

#- name: dump_gpdb5_simple
#  type: gcs
#  source:
#    bucket: ((gcs-bucket-intermediates))
#    json_key: ((concourse-gcs-resources-service-account-key))
#    versioned_file: 5X_STABLE/simple_dump/dump.sql.xz

- name: gp-upgrade-packaging
  type: git
  source:
    branch: master
    private_key: ((gp-upgrade-packaging-git-private-key))
    uri: git@github.com:pivotal/gp-upgrade-packaging.git

anchors:
  - &ccp_default_params
    action: create
    delete_on_failure: true
    generate_random_name: true
    terraform_source: ccp_src/google/

  - &ccp_gen_cluster_default_params
    AWS_ACCESS_KEY_ID: ((tf-machine-access-key-id))
    AWS_SECRET_ACCESS_KEY: ((tf-machine-secret-access-key))
    AWS_DEFAULT_REGION: ((aws-region))
    BUCKET_PATH: clusters-google/
    BUCKET_NAME: ((tf-bucket-name))
    CLOUD_PROVIDER: google

  - &ccp_destroy
    put: terraform
    params:
      action: destroy
      env_name_file: terraform/name
      terraform_source: ccp_src/google/
      vars:
        aws_instance-node-instance_type: t2.micro #t2.micro is ignored in destroy, but aws_instance-node-instance_type is required.
        aws_ebs_volume_type: standard
    get_params:
      action: destroy

  - &set_failed
    do:
      - task: on_failure_set_failed
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: pivotaldata/ccp
              tag: "7"
          inputs:
            - name: ccp_src
            - name: terraform
          run:
            path: 'ccp_src/google/ccp_failed_test.sh'
          params:
            GOOGLE_CREDENTIALS: ((google-service-account-key))
            GOOGLE_PROJECT_ID: ((google-project-id))
            GOOGLE_ZONE: ((google-zone))
            GOOGLE_SERVICE_ACCOUNT: ((google-service-account))
            AWS_ACCESS_KEY_ID: ((tf-machine-access-key-id))
            AWS_SECRET_ACCESS_KEY: ((tf-machine-secret-access-key))
            AWS_DEFAULT_REGION: ((tf-machine-region))
            BUCKET_PATH: clusters-google/
            BUCKET_NAME: ((tf-bucket-name))

  - &slack_alert
    do:
      - put: slack-alert
        params:
          text: |
            Hey team, <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|gpupgrade/$BUILD_JOB_NAME> failed.

jobs:
- name: build
  plan:
  - get: gpupgrade_src
    trigger: true
  - task: build
    file: gpupgrade_src/ci/tasks/build.yml
  on_failure:
    <<: *slack_alert

- name: noinstall-tests
  plan:
  - in_parallel:
    - get: gpupgrade_src
      trigger: true
    - get: bats
  - task: noinstall-tests
    file: gpupgrade_src/ci/tasks/noinstall-tests.yml
  on_failure:
    <<: *slack_alert

- name: install-tests
  plan:
  - in_parallel:
    - get: gpupgrade_src
      trigger: true
    - get: gpdb_src
      resource: gpdb6_src
    - get: bats
    - get: bin_gpdb
      resource: bin_gpdb6.5.0_centos6
      trigger: true
  - task: install-tests
    file: gpupgrade_src/ci/tasks/install-tests.yml
  on_failure:
    <<: *slack_alert

#
#- name: 6-to-6
#  plan:
#  - in_parallel:
#    - get: gpupgrade_src
#      trigger: true
#    - get: bin_gpdb6
#      resource: bin_gpdb6.5.0_centos6
#      trigger: true
#    - get: ccp_src
#    # FIXME: this is not guaranteed to be the same dump generated by the above
#    # binary...
#    - get: sqldump
#      resource: dump_gpdb6_icw_gporca_centos6
#    - get: gp-upgrade-packaging
#  - task: transform_rpm
#    file: gp-upgrade-packaging/ci/concourse/package/task.yml
#    input_mapping:
#      bin-gpdb: bin_gpdb6
#    output_mapping:
#      rpm-gpdb: rpm_gpdb6
#  - put: terraform
#    params:
#      <<: *ccp_default_params
#      vars:
#        instance_type: n1-standard-2
#        number_of_nodes: 4
#        standby_master: true
#        PLATFORM: centos6
#  - task: gen_old_cluster
#    file: ccp_src/ci/tasks/gen_cluster.yml
#    params:
#      <<: *ccp_gen_cluster_default_params
#      PLATFORM: centos6
#      GPDB_RPM: true
#    input_mapping:
#      gpdb_rpm: rpm_gpdb6
#  - task: gpinitsystem_old_cluster
#    file: ccp_src/ci/tasks/gpinitsystem.yml
#  - task: upgrade_cluster
#    file: gpupgrade_src/ci/tasks/upgrade-cluster.yml
#    params:
#      OLD_PACKAGE: greenplum-db-6
#      NEW_PACKAGE: greenplum-db-6
#  ensure:
#    <<: *set_failed
#  on_success:
#    <<: *ccp_destroy
#  on_failure:
#    <<: *slack_alert

#
#- name: 5-to-6.5.0
#  plan:
#    - in_parallel:
#        - get: gpupgrade_src
#          trigger: true
#        - get: bin_gpdb_old
#          resource: bin_gpdb5_centos6
#          trigger: true
#        - get: bin_gpdb_new
#          resource: bin_gpdb6.5.0_centos6
#          trigger: true
#        - get: ccp_src
#        - get: sqldump
#          resource: dump_gpdb5_simple
#        - get: gp-upgrade-packaging
#    - in_parallel:
#      - task: transform_old
#        file: gp-upgrade-packaging/ci/concourse/package/task.yml
#        input_mapping:
#          bin-gpdb: bin_gpdb_old
#        output_mapping:
#          rpm-gpdb: rpm_gpdb_old
#      - task: transform_new
#        file: gp-upgrade-packaging/ci/concourse/package/task.yml
#        input_mapping:
#          bin-gpdb: bin_gpdb_new
#        output_mapping:
#          rpm-gpdb: rpm_gpdb_new
#    - put: terraform
#      params:
#        <<: *ccp_default_params
#        vars:
#
#          standby_master: true
#
#          instance_type: n1-standard-2
#          number_of_nodes: 4
#          PLATFORM: centos6
#    - task: gen_old_cluster
#      file: ccp_src/ci/tasks/gen_cluster.yml
#      params:
#        <<: *ccp_gen_cluster_default_params
#        PLATFORM: centos6
#        GPDB_RPM: true
#      input_mapping:
#        gpdb_rpm: rpm_gpdb_old
#    - task: gpinitsystem_old_cluster
#      file: ccp_src/ci/tasks/gpinitsystem.yml
#    - task: prepare_old_and_new_installations
#      config:
#        platform: linux
#        image_resource:
#          type: docker-image
#          source:
#            repository: alpine
#            tag: latest
#        inputs:
#          - name: rpm_gpdb_new
#          - name: cluster_env_files
#        run:
#          path: sh
#          args:
#            - -exc
#            - |
#              apk add --no-progress openssh-client
#
#              cp -R cluster_env_files/.ssh /root/.ssh
#
#              # Install the new binary.
#              for host in $(cat cluster_env_files/hostfile_all); do
#                  scp rpm_gpdb_new/*.rpm "${host}:/tmp/bin_gpdb_new.rpm"
#                  ssh -ttn centos@"$host" sudo yum install -y /tmp/bin_gpdb_new.rpm
#              done
#    - task: upgrade_cluster
#      file: gpupgrade_src/ci/tasks/upgrade-cluster.yml
#      params:
#        FILTER_DIFF: 1
#        OLD_PACKAGE: greenplum-db-5
#        NEW_PACKAGE: greenplum-db-6
#
#
#  ensure:
#    <<: *set_failed
#  on_success:
#    <<: *ccp_destroy
#  on_failure:
#    <<: *slack_alert
#
#- name: 5-to-6.5.0-primaries-only
#  plan:
#    - in_parallel:
#        - get: gpupgrade_src
#          trigger: true
#        - get: bin_gpdb_old
#          resource: bin_gpdb5_centos6
#          trigger: true
#        - get: bin_gpdb_new
#          resource: bin_gpdb6.5.0_centos6
#          trigger: true
#        - get: ccp_src
#        - get: sqldump
#          resource: dump_gpdb5_simple
#        - get: gp-upgrade-packaging
#    - in_parallel:
#      - task: transform_old
#        file: gp-upgrade-packaging/ci/concourse/package/task.yml
#        input_mapping:
#          bin-gpdb: bin_gpdb_old
#        output_mapping:
#          rpm-gpdb: rpm_gpdb_old
#      - task: transform_new
#        file: gp-upgrade-packaging/ci/concourse/package/task.yml
#        input_mapping:
#          bin-gpdb: bin_gpdb_new
#        output_mapping:
#          rpm-gpdb: rpm_gpdb_new
#    - put: terraform
#      params:
#        <<: *ccp_default_params
#        vars:
#
#          mirrors: false
#
#          instance_type: n1-standard-2
#          number_of_nodes: 4
#          PLATFORM: centos6
#    - task: gen_old_cluster
#      file: ccp_src/ci/tasks/gen_cluster.yml
#      params:
#        <<: *ccp_gen_cluster_default_params
#        PLATFORM: centos6
#        GPDB_RPM: true
#      input_mapping:
#        gpdb_rpm: rpm_gpdb_old
#    - task: gpinitsystem_old_cluster
#      file: ccp_src/ci/tasks/gpinitsystem.yml
#    - task: prepare_old_and_new_installations
#      config:
#        platform: linux
#        image_resource:
#          type: docker-image
#          source:
#            repository: alpine
#            tag: latest
#        inputs:
#          - name: rpm_gpdb_new
#          - name: cluster_env_files
#        run:
#          path: sh
#          args:
#            - -exc
#            - |
#              apk add --no-progress openssh-client
#
#              cp -R cluster_env_files/.ssh /root/.ssh
#
#              # Install the new binary.
#              for host in $(cat cluster_env_files/hostfile_all); do
#                  scp rpm_gpdb_new/*.rpm "${host}:/tmp/bin_gpdb_new.rpm"
#                  ssh -ttn centos@"$host" sudo yum install -y /tmp/bin_gpdb_new.rpm
#              done
#    - task: upgrade_cluster
#      file: gpupgrade_src/ci/tasks/upgrade-cluster.yml
#      params:
#        FILTER_DIFF: 1
#        OLD_PACKAGE: greenplum-db-5
#        NEW_PACKAGE: greenplum-db-6
#
#
#        MIRRORS: 0
#        STANDBY: 0
#
#  ensure:
#    <<: *set_failed
#  on_success:
#    <<: *ccp_destroy
#  on_failure:
#    <<: *slack_alert
#
#- name: 5-to-6.5.0-no-standby
#  plan:
#    - in_parallel:
#        - get: gpupgrade_src
#          trigger: true
#        - get: bin_gpdb_old
#          resource: bin_gpdb5_centos6
#          trigger: true
#        - get: bin_gpdb_new
#          resource: bin_gpdb6.5.0_centos6
#          trigger: true
#        - get: ccp_src
#        - get: sqldump
#          resource: dump_gpdb5_simple
#        - get: gp-upgrade-packaging
#    - in_parallel:
#      - task: transform_old
#        file: gp-upgrade-packaging/ci/concourse/package/task.yml
#        input_mapping:
#          bin-gpdb: bin_gpdb_old
#        output_mapping:
#          rpm-gpdb: rpm_gpdb_old
#      - task: transform_new
#        file: gp-upgrade-packaging/ci/concourse/package/task.yml
#        input_mapping:
#          bin-gpdb: bin_gpdb_new
#        output_mapping:
#          rpm-gpdb: rpm_gpdb_new
#    - put: terraform
#      params:
#        <<: *ccp_default_params
#        vars:
#
#          instance_type: n1-standard-2
#          number_of_nodes: 4
#          PLATFORM: centos6
#    - task: gen_old_cluster
#      file: ccp_src/ci/tasks/gen_cluster.yml
#      params:
#        <<: *ccp_gen_cluster_default_params
#        PLATFORM: centos6
#        GPDB_RPM: true
#      input_mapping:
#        gpdb_rpm: rpm_gpdb_old
#    - task: gpinitsystem_old_cluster
#      file: ccp_src/ci/tasks/gpinitsystem.yml
#    - task: prepare_old_and_new_installations
#      config:
#        platform: linux
#        image_resource:
#          type: docker-image
#          source:
#            repository: alpine
#            tag: latest
#        inputs:
#          - name: rpm_gpdb_new
#          - name: cluster_env_files
#        run:
#          path: sh
#          args:
#            - -exc
#            - |
#              apk add --no-progress openssh-client
#
#              cp -R cluster_env_files/.ssh /root/.ssh
#
#              # Install the new binary.
#              for host in $(cat cluster_env_files/hostfile_all); do
#                  scp rpm_gpdb_new/*.rpm "${host}:/tmp/bin_gpdb_new.rpm"
#                  ssh -ttn centos@"$host" sudo yum install -y /tmp/bin_gpdb_new.rpm
#              done
#    - task: upgrade_cluster
#      file: gpupgrade_src/ci/tasks/upgrade-cluster.yml
#      params:
#        FILTER_DIFF: 1
#        OLD_PACKAGE: greenplum-db-5
#        NEW_PACKAGE: greenplum-db-6
#
#        STANDBY: 0
#
#
#  ensure:
#    <<: *set_failed
#  on_success:
#    <<: *ccp_destroy
#  on_failure:
#    <<: *slack_alert
##
#

- name: 5-to-6-retail-demo
  plan:
    - in_parallel:
      - get: gpupgrade_src
        trigger: true
      - get: bin_gpdb_old
        resource: bin_gpdb5_centos6
        trigger: true
      - get: bin_gpdb_new
        resource: bin_gpdb6.5.0_centos6
        trigger: true
      - get: ccp_src
      - get: retail_demo_src
      - get: gp-upgrade-packaging
    - in_parallel:
        - task: transform_old
          file: gp-upgrade-packaging/ci/concourse/package/task.yml
          input_mapping:
            bin-gpdb: bin_gpdb_old
          output_mapping:
            rpm-gpdb: rpm_gpdb_old
        - task: transform_new
          file: gp-upgrade-packaging/ci/concourse/package/task.yml
          input_mapping:
            bin-gpdb: bin_gpdb_new
          output_mapping:
            rpm-gpdb: rpm_gpdb_new
    - put: terraform
      params:
        <<: *ccp_default_params
        vars:
          standby_master: true
          instance_type: n1-standard-2
          number_of_nodes: 3
          PLATFORM: centos6
          disk_size: 1000
          ccp_reap_minutes: 180 # XXX: Remove this before PR'ing
    - task: gen_old_cluster
      file: ccp_src/ci/tasks/gen_cluster.yml
      params:
        <<: *ccp_gen_cluster_default_params
        PLATFORM: centos6
        GPDB_RPM: true
      input_mapping:
        gpdb_rpm: rpm_gpdb_old
    - task: gpinitsystem_old_cluster
      file: ccp_src/ci/tasks/gpinitsystem.yml
    - task: prepare_old_and_new_installations
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: alpine
            tag: latest
        inputs:
          - name: rpm_gpdb_new
          - name: cluster_env_files
        run:
          path: sh
          args:
            - -exc
            - |
              apk add --no-progress openssh-client

              cp -R cluster_env_files/.ssh /root/.ssh

              # Install the new binary.
              for host in $(cat cluster_env_files/hostfile_all); do
                  scp rpm_gpdb_new/*.rpm "${host}:/tmp/bin_gpdb_new.rpm"
                  ssh -ttn centos@"$host" sudo yum install -y /tmp/bin_gpdb_new.rpm
              done
    - task: load_retail_data
      file: gpupgrade_src/ci/tasks/load-retail-data.yml
      params:
        OLD_PACKAGE: greenplum-db-5
        NEW_PACKAGE: greenplum-db-6
    - task: upgrade_cluster
      file: gpupgrade_src/ci/tasks/upgrade-cluster.yml
      params:
        FILTER_DIFF: 1
        OLD_PACKAGE: greenplum-db-5
        NEW_PACKAGE: greenplum-db-6
  ensure:
    <<: *set_failed
  on_success:
    <<: *ccp_destroy
  on_failure:
    <<: *slack_alert
