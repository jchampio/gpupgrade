// Code generated by protoc-gen-go. DO NOT EDIT.
// source: hub_debug.proto

package idl

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("hub_debug.proto", fileDescriptor_47bbbddb4ae0398f) }

var fileDescriptor_47bbbddb4ae0398f = []byte{
	// 133 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xcf, 0x28, 0x4d, 0x8a,
	0x4f, 0x49, 0x4d, 0x2a, 0x4d, 0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0xce, 0x4c, 0xc9,
	0x91, 0x12, 0x48, 0xce, 0xc9, 0x8c, 0x2f, 0xc9, 0x8f, 0xcf, 0x28, 0x4d, 0x82, 0x08, 0x1b, 0xf9,
	0x72, 0x71, 0xb8, 0x80, 0x54, 0x79, 0x94, 0x26, 0x09, 0x39, 0x72, 0x89, 0x87, 0xa4, 0x16, 0x97,
	0xb8, 0x65, 0xe6, 0x25, 0xe6, 0x64, 0x56, 0xa5, 0x7a, 0xa6, 0xa4, 0xe6, 0x16, 0xe4, 0x97, 0xa4,
	0xe6, 0x25, 0xa7, 0x0a, 0x89, 0xe8, 0x65, 0xa6, 0xe4, 0xe8, 0xc1, 0x64, 0x82, 0x52, 0x0b, 0x4b,
	0x53, 0x8b, 0x4b, 0xa4, 0x78, 0xc0, 0xa2, 0xbe, 0xa9, 0xc5, 0xc5, 0x89, 0xe9, 0xa9, 0x4a, 0x0c,
	0x06, 0x8c, 0x49, 0x6c, 0x60, 0x53, 0x8d, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0xd3, 0x8a, 0x1d,
	0x8a, 0x7f, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DebugHubClient is the client API for DebugHub service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DebugHubClient interface {
	TestFinalizeIdempotence(ctx context.Context, in *FinalizeRequest, opts ...grpc.CallOption) (DebugHub_TestFinalizeIdempotenceClient, error)
}

type debugHubClient struct {
	cc *grpc.ClientConn
}

func NewDebugHubClient(cc *grpc.ClientConn) DebugHubClient {
	return &debugHubClient{cc}
}

func (c *debugHubClient) TestFinalizeIdempotence(ctx context.Context, in *FinalizeRequest, opts ...grpc.CallOption) (DebugHub_TestFinalizeIdempotenceClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DebugHub_serviceDesc.Streams[0], "/idl.DebugHub/TestFinalizeIdempotence", opts...)
	if err != nil {
		return nil, err
	}
	x := &debugHubTestFinalizeIdempotenceClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DebugHub_TestFinalizeIdempotenceClient interface {
	Recv() (*Message, error)
	grpc.ClientStream
}

type debugHubTestFinalizeIdempotenceClient struct {
	grpc.ClientStream
}

func (x *debugHubTestFinalizeIdempotenceClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DebugHubServer is the server API for DebugHub service.
type DebugHubServer interface {
	TestFinalizeIdempotence(*FinalizeRequest, DebugHub_TestFinalizeIdempotenceServer) error
}

// UnimplementedDebugHubServer can be embedded to have forward compatible implementations.
type UnimplementedDebugHubServer struct {
}

func (*UnimplementedDebugHubServer) TestFinalizeIdempotence(req *FinalizeRequest, srv DebugHub_TestFinalizeIdempotenceServer) error {
	return status.Errorf(codes.Unimplemented, "method TestFinalizeIdempotence not implemented")
}

func RegisterDebugHubServer(s *grpc.Server, srv DebugHubServer) {
	s.RegisterService(&_DebugHub_serviceDesc, srv)
}

func _DebugHub_TestFinalizeIdempotence_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FinalizeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DebugHubServer).TestFinalizeIdempotence(m, &debugHubTestFinalizeIdempotenceServer{stream})
}

type DebugHub_TestFinalizeIdempotenceServer interface {
	Send(*Message) error
	grpc.ServerStream
}

type debugHubTestFinalizeIdempotenceServer struct {
	grpc.ServerStream
}

func (x *debugHubTestFinalizeIdempotenceServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

var _DebugHub_serviceDesc = grpc.ServiceDesc{
	ServiceName: "idl.DebugHub",
	HandlerType: (*DebugHubServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "TestFinalizeIdempotence",
			Handler:       _DebugHub_TestFinalizeIdempotence_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "hub_debug.proto",
}
