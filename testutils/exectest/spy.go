// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/greenplum-db/gpupgrade/testutils/exectest (interfaces: CommandSpy)

// Package exectest is a generated GoMock package.
package exectest

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockCommandSpy is a mock of CommandSpy interface
type MockCommandSpy struct {
	ctrl     *gomock.Controller
	recorder *MockCommandSpyMockRecorder
}

// MockCommandSpyMockRecorder is the mock recorder for MockCommandSpy
type MockCommandSpyMockRecorder struct {
	mock *MockCommandSpy
}

// NewMockCommandSpy creates a new mock instance
func NewMockCommandSpy(ctrl *gomock.Controller) *MockCommandSpy {
	mock := &MockCommandSpy{ctrl: ctrl}
	mock.recorder = &MockCommandSpyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCommandSpy) EXPECT() *MockCommandSpyMockRecorder {
	return m.recorder
}

// Command mocks base method
func (m *MockCommandSpy) Command(arg0 string, arg1 ...string) Main {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Command", varargs...)
	ret0, _ := ret[0].(Main)
	return ret0
}

// Command indicates an expected call of Command
func (mr *MockCommandSpyMockRecorder) Command(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Command", reflect.TypeOf((*MockCommandSpy)(nil).Command), varargs...)
}
